# This is an example that demonstrate the ease of use of ASoC's powerful REST API capabilities 
# by integrating ASoC SAST security scan with Github Actions.
# 
# Within 7 simple REST API method calls, we were was able to check out a source code from a 
# github repo, have a SAST scan submitted into ASoC for static analysis and get scan result/report back.
# 
# The example shows the process of scanning a simple Python project. The full YAML script is in 
# the file asoc_codebase.yml
# 
# Search for 'TODO' to see where updates are required

name: HCL ASoC SAST Workflow

# Controls when the action will run. 
on:
  # TODO: Uncomment/comment triggers based on your needs
  # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Check powershell version
        run: |
          $PSVersionTable
        shell: pwsh
      # Runs a set of commands using the runners shell
      - name: List directory
        run: |
          ls
        shell: pwsh
      
      # TODO - Use (uncomment) the following for a .NET build
      # - name: Run donet -build
      #   run: dotnet.exe publish -c Release -r win-x64
      
      # Runs AppScan Step
      - name: Perform HCL AppScan Security Analysis
        env:
          # TODO: In ASoC, generate an ASoC key/secret
          # TODO: In GitHub > Settings > Secrets, Add ASOC_KEY and ASOC_SECRET variables
          ASOC_KEY: ${{ secrets.ASOC_KEY }}
          ASOC_SECRET: ${{ secrets.ASOC_SECRET }}
          TestVar: abcd
          ASOC_SCAN_NAME: Automated Scan from Github Actions
          # TODO: Update ASOC_APPID to reflect the ASoC application this scan is to be associated with
          # ASoC App: ASoCActionDemo
          ASOC_APPID: 2e896a87-b564-46cb-a756-3e918c10273c
          #ASOC_APPID: 19ac48c4-2aca-4b2d-b49c-139e6378a9e6

        run: |
          $baseURL = 'https://cloud.appscan.com/api/V2'
          $env:ASoC_appID = $env:ASOC_APPID
          $env:ASoC_scanName = $env:ASOC_SCAN_NAME
          # TODO: appscan-config.xml is required for this to run. 
          # TODO: Make sure to add and <Exlcude>saclientutil</Exclude> statement to prevent SAClientUtil from being scanned
          $env:ASoC_IRX_Config_file = "appscan-config.xml"
          $bearer_token =''
          
          # ASoC - Login to ASoC with API Key and Secret
          $jsonBody = "
            {
            `"KeyId`": `"$env:ASOC_KEY`",
            `"KeySecret`": `"$env:ASOC_SECRET`"
            }
          "
          $params = @{
          Uri         = "$baseURL/Account/ApiKeyLogin"
          Method      = 'POST'
          Body        = $jsonBody
          Headers = @{
              'Content-Type' = 'application/json'
            }
          }
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
          $Members = Invoke-RestMethod @params
          Write-Host "Auth successful - Token received: $Members.token"
          $bearer_token = $Members.token
          $ProgressPreference = 'SilentlyContinue'
          
          # ASoC -  Download the latest version of SAClientUtil to generate the .irx in preparation for the scan
          Write-Host "Downloading latest verion of SAClientUtil..."
          Invoke-WebRequest -Uri "https://cloud.appscan.com/api/Local/StaticAnalyzer/ARSATool" -OutFile "saclientutil.zip"
          Expand-Archive -Path "saclientutil.zip" -DestinationPath "saclientutil"
          $SAClientUtilFolder = Get-ChildItem -Path .\saclientutil
          $command = ".\saclientutil\" + $SAClientUtilFolder.name + "\bin\appscan.bat"
          & $command prepare -c $env:ASoC_IRX_Config_file -n output.irx
          
          # Comment out this lines for a proper .irx generation. This line is for demo purposes, it only downloads a sample .irx file that is not related to the source code in this repo
          # Invoke-WebRequest -Uri "https://cloud.appscan.com/api/V2/Tools/ScanDemoFiles/StaticAnalyzer" -OutFile "output.irx"

          # ASoC - Upload the .irx file onto ASoC

          $irx_file = [IO.File]::ReadAllBytes('output.irx')
          $params = @{
            Uri         = "$baseURL/FileUpload"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'multipart/form-data'
              Authorization = "Bearer $bearer_token"
            }
             Form = @{
            'fileToUpload' = Get-Item -Path "output.irx"
           }
          }
          $upload = Invoke-RestMethod @params
          $upload_File_ID = $upload.FileId
          write-host "IRX Uploaded File ID: $upload_File_ID"
          
          # ASoC - Execute a Static (SAST) Scan on ASoC by specifying the upload_File_ID
          
          $params = @{
            Uri         = "$baseURL/Scans/StaticAnalyzer"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $body = @{
             'ApplicationFileId' = "$upload_File_ID"
             'ScanName' = "$env:ASoC_scanName"
             'EnableMailNotification' = "true"
             'Locale' = "en-US"
             'AppId' = "$env:ASoC_appID"
             'Execute' = "true"
             'FullyAutomatic' = "false"
             'Personal' = "false"
          }
          $output_runscan = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
          write-host "Scan executed"
          Write-Host $output_runscan
          $scan_ID = $output_runscan.Id
          
          # ASoC - Checking for scan completion status
          
          $params = @{
            Uri         = "$baseURL/Scans/$scan_ID/Executions"
            Method      = 'Get'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $scan_status ="Not Ready"
          while($scan_status -ne "Ready"){
            $output = Invoke-RestMethod @params
            $scan_status = $output.Status
            Start-Sleep -Seconds 10
            Write-Host "Waiting for Scan Completion..."
          }
          
          # ASoC - Generate a HTML report on the completed scan by specifying the scan_ID
          
          $params = @{
            Uri         = "$baseURL/Reports/Security/Scan/$scan_ID"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $body = @{
            'Configuration' = @{
              'Summary' = "true"
              'Details' = "true"
              'Discussion' = "true"
              'Overview' = "true"
              'TableOfContent' = "true"
              'Advisories' = "true"
              'FixRecommendation' = "true"
              'History' = "true"
              'Coverage' = "true"
              'MinimizeDetails' = "true"
              'Articles' = "true"
              'ReportFileType' = "HTML"
              'Title' = "false"
              'Locale' = "en-US"
            }
          }
          $output_runreport = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
          $report_ID = $output_runreport.Id
          #Wait for report
          $params = @{
            Uri         = "$baseURL/Reports/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $report_status ="Not Ready"
          while($report_status -ne "Ready"){
            $output = Invoke-RestMethod @params
            $report_status = $output.Status
            Start-Sleep -Seconds 5
            Write-Host "Generating Report... Progress: " $output.Progress "%"
          }
          #Download Report
          $params = @{
            Uri         = "$baseURL/Reports/Download/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Accept' = 'text/html'
              Authorization = "Bearer $bearer_token"
            }
          }
          $output_runreport = Invoke-RestMethod @params
          Out-File -InputObject $output_runreport -FilePath .\AppScan_Security_Report.html
          
          # ASoC - Generate an XML report on the completed scan by specifying the scan_ID
          
          $params = @{
            Uri         = "$baseURL/Reports/Security/Scan/$scan_ID"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $body = @{
            'Configuration' = @{
              'Summary' = "true"
              'Details' = "true"
              'Discussion' = "true"
              'Overview' = "true"
              'TableOfContent' = "true"
              'Advisories' = "true"
              'FixRecommendation' = "true"
              'History' = "true"
              'Coverage' = "true"
              'MinimizeDetails' = "true"
              'Articles' = "true"
              'ReportFileType' = "XML"
              'Title' = "false"
              'Locale' = "en-US"
            }
          }
          $output_runreport = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
          $report_ID = $output_runreport.Id
          #Wait for report
          $params = @{
            Uri         = "$baseURL/Reports/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $report_status ="Not Ready"
          while($report_status -ne "Ready"){
            $output = Invoke-RestMethod @params
            $report_status = $output.Status
            Start-Sleep -Seconds 5
            Write-Host "Generating XML Report... Progress: " $output.Progress "%"
          }
          #Download Report
          $params = @{
            Uri         = "$baseURL/Reports/Download/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Accept' = 'text/html'
              Authorization = "Bearer $bearer_token"
            }
          }
          $output_runreport = Invoke-RestMethod @params
          Out-File -InputObject $output_runreport -FilePath .\AppScan_Security_Report.xml
          
          
        shell: pwsh
      - uses: actions/upload-artifact@v2
        name: Upload HCL AppScan Static Analysis HTML Report to Github Artifacts
        with:
          name: AppScan Static Analysis HTML Security Scan Report 
          path: AppScan_Security_Report.html
          
      - uses: actions/upload-artifact@v2
        name: Upload HCL AppScan Static Analysis XML Report to Github Artifacts
        with:
          name: AppScan Static Analysis XML Security Scan Report 
          path: AppScan_Security_Report.xml
