/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Services - Query Service
 * Query Service Api Documentation
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
/**
 * V2UrlResourceApi - axios parameter creator
 * @export
 */
export const V2UrlResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets Response for V2.0 API Seo url data
         * @param {number} storeId 
         * @param {Array<string>} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV2CategoryResources1: async (storeId: number, identifier?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getV2CategoryResources1', 'storeId', storeId)
            const localVarPath = `/api/v2/urls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (identifier) {
                localVarQueryParameter['identifier'] = identifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UrlResourceApi - functional programming interface
 * @export
 */
export const V2UrlResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UrlResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets Response for V2.0 API Seo url data
         * @param {number} storeId 
         * @param {Array<string>} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV2CategoryResources1(storeId: number, identifier?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV2CategoryResources1(storeId, identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V2UrlResourceApi - factory interface
 * @export
 */
export const V2UrlResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UrlResourceApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets Response for V2.0 API Seo url data
         * @param {number} storeId 
         * @param {Array<string>} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV2CategoryResources1(storeId: number, identifier?: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.getV2CategoryResources1(storeId, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UrlResourceApi - object-oriented interface
 * @export
 * @class V2UrlResourceApi
 * @extends {BaseAPI}
 */
export class V2UrlResourceApi extends BaseAPI {
    /**
     * 
     * @summary Gets Response for V2.0 API Seo url data
     * @param {number} storeId 
     * @param {Array<string>} [identifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UrlResourceApi
     */
    public getV2CategoryResources1(storeId: number, identifier?: Array<string>, options?: any) {
        return V2UrlResourceApiFp(this.configuration).getV2CategoryResources1(storeId, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
