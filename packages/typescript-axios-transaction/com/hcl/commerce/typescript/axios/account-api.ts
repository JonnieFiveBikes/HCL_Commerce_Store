/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { AccountCreateResponse } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { AccountDeleteResponse } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { AccountDetails } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { AccountList } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { AccountUpdateRequest } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { AccountUpdateResponse } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an account.
         * @summary Create a new account
         * @param {string} storeId The store identifier.
         * @param {AccountDetails} accountDetails The request body for a create account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreateAccount: async (storeId: string, accountDetails: AccountDetails, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('accountCreateAccount', 'storeId', storeId)
            // verify required parameter 'accountDetails' is not null or undefined
            assertParamExists('accountCreateAccount', 'accountDetails', accountDetails)
            const localVarPath = `/store/{storeId}/account`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing account.
         * @summary Deletes a existing account
         * @param {string} storeId The store identifier.
         * @param {string} accountId The unique ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeleteAccount: async (storeId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('accountDeleteAccount', 'storeId', storeId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountDeleteAccount', 'accountId', accountId)
            const localVarPath = `/store/{storeId}/account/{accountId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"accountId"}}`, String(accountId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds an account by its id.
         * @summary Gets an account by ID
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountFindByAccountId: async (storeId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('accountFindByAccountId', 'storeId', storeId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountFindByAccountId', 'accountId', accountId)
            const localVarPath = `/store/{storeId}/account/{accountId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"accountId"}}`, String(accountId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches business accounts in a store. <br>If \'name\' query parameter is specified, only return business accounts with name matches (case-insensitive). <br> \'nameSearchMode\' query parameter is used to specify search behavior. \'EXACT\' - exactly match or \'LIKE\' - as long as contains. Default value is \'LIKE\'. <br>If no \'name\' query parameter is specified, returns all business accounts in this store.
         * @summary Searches business accounts in a store.
         * @param {string} storeId The store identifier.
         * @param {string} [name] The text used for searching accounts by name.
         * @param {string} [nameSearchMode] Defines the account name is searched. \&#39;EXACT\&#39; means returning names which exactly match(case-insensitive) the input.  \&#39;LIKE\&#39; means returning names which contains the search input (case-insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSearchAccounts: async (storeId: string, name?: string, nameSearchMode?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('accountSearchAccounts', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/account`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameSearchMode !== undefined) {
                localVarQueryParameter['nameSearchMode'] = nameSearchMode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing account.
         * @summary Updates an existing account.
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {AccountUpdateRequest} accountUpdateRequest The request body for updating an account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUpdateAccount: async (storeId: string, accountId: string, accountUpdateRequest: AccountUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('accountUpdateAccount', 'storeId', storeId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountUpdateAccount', 'accountId', accountId)
            // verify required parameter 'accountUpdateRequest' is not null or undefined
            assertParamExists('accountUpdateAccount', 'accountUpdateRequest', accountUpdateRequest)
            const localVarPath = `/store/{storeId}/account/{accountId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"accountId"}}`, String(accountId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an account.
         * @summary Create a new account
         * @param {string} storeId The store identifier.
         * @param {AccountDetails} accountDetails The request body for a create account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountCreateAccount(storeId: string, accountDetails: AccountDetails, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountCreateAccount(storeId, accountDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing account.
         * @summary Deletes a existing account
         * @param {string} storeId The store identifier.
         * @param {string} accountId The unique ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDeleteAccount(storeId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountDeleteAccount(storeId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds an account by its id.
         * @summary Gets an account by ID
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountFindByAccountId(storeId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountFindByAccountId(storeId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches business accounts in a store. <br>If \'name\' query parameter is specified, only return business accounts with name matches (case-insensitive). <br> \'nameSearchMode\' query parameter is used to specify search behavior. \'EXACT\' - exactly match or \'LIKE\' - as long as contains. Default value is \'LIKE\'. <br>If no \'name\' query parameter is specified, returns all business accounts in this store.
         * @summary Searches business accounts in a store.
         * @param {string} storeId The store identifier.
         * @param {string} [name] The text used for searching accounts by name.
         * @param {string} [nameSearchMode] Defines the account name is searched. \&#39;EXACT\&#39; means returning names which exactly match(case-insensitive) the input.  \&#39;LIKE\&#39; means returning names which contains the search input (case-insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSearchAccounts(storeId: string, name?: string, nameSearchMode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountSearchAccounts(storeId, name, nameSearchMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing account.
         * @summary Updates an existing account.
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {AccountUpdateRequest} accountUpdateRequest The request body for updating an account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUpdateAccount(storeId: string, accountId: string, accountUpdateRequest: AccountUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountUpdateAccount(storeId, accountId, accountUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Create an account.
         * @summary Create a new account
         * @param {string} storeId The store identifier.
         * @param {AccountDetails} accountDetails The request body for a create account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreateAccount(storeId: string, accountDetails: AccountDetails, options?: any): AxiosPromise<AccountCreateResponse> {
            return localVarFp.accountCreateAccount(storeId, accountDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing account.
         * @summary Deletes a existing account
         * @param {string} storeId The store identifier.
         * @param {string} accountId The unique ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeleteAccount(storeId: string, accountId: string, options?: any): AxiosPromise<AccountDeleteResponse> {
            return localVarFp.accountDeleteAccount(storeId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds an account by its id.
         * @summary Gets an account by ID
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountFindByAccountId(storeId: string, accountId: string, options?: any): AxiosPromise<AccountDetails> {
            return localVarFp.accountFindByAccountId(storeId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches business accounts in a store. <br>If \'name\' query parameter is specified, only return business accounts with name matches (case-insensitive). <br> \'nameSearchMode\' query parameter is used to specify search behavior. \'EXACT\' - exactly match or \'LIKE\' - as long as contains. Default value is \'LIKE\'. <br>If no \'name\' query parameter is specified, returns all business accounts in this store.
         * @summary Searches business accounts in a store.
         * @param {string} storeId The store identifier.
         * @param {string} [name] The text used for searching accounts by name.
         * @param {string} [nameSearchMode] Defines the account name is searched. \&#39;EXACT\&#39; means returning names which exactly match(case-insensitive) the input.  \&#39;LIKE\&#39; means returning names which contains the search input (case-insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSearchAccounts(storeId: string, name?: string, nameSearchMode?: string, options?: any): AxiosPromise<AccountList> {
            return localVarFp.accountSearchAccounts(storeId, name, nameSearchMode, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing account.
         * @summary Updates an existing account.
         * @param {string} storeId The store identifier.
         * @param {string} accountId The ID of the account.
         * @param {AccountUpdateRequest} accountUpdateRequest The request body for updating an account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUpdateAccount(storeId: string, accountId: string, accountUpdateRequest: AccountUpdateRequest, options?: any): AxiosPromise<AccountUpdateResponse> {
            return localVarFp.accountUpdateAccount(storeId, accountId, accountUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Create an account.
     * @summary Create a new account
     * @param {string} storeId The store identifier.
     * @param {AccountDetails} accountDetails The request body for a create account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountCreateAccount(storeId: string, accountDetails: AccountDetails, options?: any) {
        return AccountApiFp(this.configuration).accountCreateAccount(storeId, accountDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing account.
     * @summary Deletes a existing account
     * @param {string} storeId The store identifier.
     * @param {string} accountId The unique ID of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountDeleteAccount(storeId: string, accountId: string, options?: any) {
        return AccountApiFp(this.configuration).accountDeleteAccount(storeId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds an account by its id.
     * @summary Gets an account by ID
     * @param {string} storeId The store identifier.
     * @param {string} accountId The ID of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountFindByAccountId(storeId: string, accountId: string, options?: any) {
        return AccountApiFp(this.configuration).accountFindByAccountId(storeId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches business accounts in a store. <br>If \'name\' query parameter is specified, only return business accounts with name matches (case-insensitive). <br> \'nameSearchMode\' query parameter is used to specify search behavior. \'EXACT\' - exactly match or \'LIKE\' - as long as contains. Default value is \'LIKE\'. <br>If no \'name\' query parameter is specified, returns all business accounts in this store.
     * @summary Searches business accounts in a store.
     * @param {string} storeId The store identifier.
     * @param {string} [name] The text used for searching accounts by name.
     * @param {string} [nameSearchMode] Defines the account name is searched. \&#39;EXACT\&#39; means returning names which exactly match(case-insensitive) the input.  \&#39;LIKE\&#39; means returning names which contains the search input (case-insensitive).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountSearchAccounts(storeId: string, name?: string, nameSearchMode?: string, options?: any) {
        return AccountApiFp(this.configuration).accountSearchAccounts(storeId, name, nameSearchMode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing account.
     * @summary Updates an existing account.
     * @param {string} storeId The store identifier.
     * @param {string} accountId The ID of the account.
     * @param {AccountUpdateRequest} accountUpdateRequest The request body for updating an account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountUpdateAccount(storeId: string, accountId: string, accountUpdateRequest: AccountUpdateRequest, options?: any) {
        return AccountApiFp(this.configuration).accountUpdateAccount(storeId, accountId, accountUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
