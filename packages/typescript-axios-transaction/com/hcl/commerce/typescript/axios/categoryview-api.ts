/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { CategoryviewCategoryDetails } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { CategoryviewCategorySummary } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * CategoryviewApi - axios parameter creator
 * @export
 */
export const CategoryviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} categoryId Category ID.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewByIdCategoryIdGet: async (storeId: string, categoryId: string, responseFormat?: string, catalogId?: string, currency?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdCategoryviewByIdCategoryIdGet', 'storeId', storeId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('storeStoreIdCategoryviewByIdCategoryIdGet', 'categoryId', categoryId)
            const localVarPath = `/store/{storeId}/categoryview/byId/{categoryId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"categoryId"}}`, String(categoryId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }

            if (catalogId !== undefined) {
                localVarQueryParameter['catalogId'] = catalogId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} parentCategoryId The parent category unique ID.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet: async (storeId: string, parentCategoryId: string, pageNumber?: number, pageSize?: number, responseFormat?: string, catalogId?: string, currency?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet', 'storeId', storeId)
            // verify required parameter 'parentCategoryId' is not null or undefined
            assertParamExists('storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet', 'parentCategoryId', parentCategoryId)
            const localVarPath = `/store/{storeId}/categoryview/byParentCategory/{parentCategoryId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"parentCategoryId"}}`, String(parentCategoryId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }

            if (catalogId !== undefined) {
                localVarQueryParameter['catalogId'] = catalogId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets all top level categories.
         * @param {string} storeId The store identifier.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewTopGet: async (storeId: string, responseFormat?: string, catalogId?: string, currency?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdCategoryviewTopGet', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/categoryview/@top`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }

            if (catalogId !== undefined) {
                localVarQueryParameter['catalogId'] = catalogId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryviewApi - functional programming interface
 * @export
 */
export const CategoryviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryviewApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} categoryId Category ID.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdCategoryviewByIdCategoryIdGet(storeId: string, categoryId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryviewCategoryDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdCategoryviewByIdCategoryIdGet(storeId, categoryId, responseFormat, catalogId, currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} parentCategoryId The parent category unique ID.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId: string, parentCategoryId: string, pageNumber?: number, pageSize?: number, responseFormat?: string, catalogId?: string, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryviewCategorySummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId, parentCategoryId, pageNumber, pageSize, responseFormat, catalogId, currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets all top level categories.
         * @param {string} storeId The store identifier.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdCategoryviewTopGet(storeId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryviewCategoryDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdCategoryviewTopGet(storeId, responseFormat, catalogId, currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryviewApi - factory interface
 * @export
 */
export const CategoryviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryviewApiFp(configuration)
    return {
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} categoryId Category ID.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewByIdCategoryIdGet(storeId: string, categoryId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any): AxiosPromise<CategoryviewCategoryDetails> {
            return localVarFp.storeStoreIdCategoryviewByIdCategoryIdGet(storeId, categoryId, responseFormat, catalogId, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets category details based on its unique ID.
         * @param {string} storeId The store identifier.
         * @param {string} parentCategoryId The parent category unique ID.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId: string, parentCategoryId: string, pageNumber?: number, pageSize?: number, responseFormat?: string, catalogId?: string, currency?: string, options?: any): AxiosPromise<CategoryviewCategorySummary> {
            return localVarFp.storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId, parentCategoryId, pageNumber, pageSize, responseFormat, catalogId, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets catalogs by search term.
         * @summary Gets all top level categories.
         * @param {string} storeId The store identifier.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
         * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdCategoryviewTopGet(storeId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any): AxiosPromise<CategoryviewCategoryDetails> {
            return localVarFp.storeStoreIdCategoryviewTopGet(storeId, responseFormat, catalogId, currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryviewApi - object-oriented interface
 * @export
 * @class CategoryviewApi
 * @extends {BaseAPI}
 */
export class CategoryviewApi extends BaseAPI {
    /**
     * Gets catalogs by search term.
     * @summary Gets category details based on its unique ID.
     * @param {string} storeId The store identifier.
     * @param {string} categoryId Category ID.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
     * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryviewApi
     */
    public storeStoreIdCategoryviewByIdCategoryIdGet(storeId: string, categoryId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any) {
        return CategoryviewApiFp(this.configuration).storeStoreIdCategoryviewByIdCategoryIdGet(storeId, categoryId, responseFormat, catalogId, currency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets catalogs by search term.
     * @summary Gets category details based on its unique ID.
     * @param {string} storeId The store identifier.
     * @param {string} parentCategoryId The parent category unique ID.
     * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
     * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
     * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryviewApi
     */
    public storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId: string, parentCategoryId: string, pageNumber?: number, pageSize?: number, responseFormat?: string, catalogId?: string, currency?: string, options?: any) {
        return CategoryviewApiFp(this.configuration).storeStoreIdCategoryviewByParentCategoryParentCategoryIdGet(storeId, parentCategoryId, pageNumber, pageSize, responseFormat, catalogId, currency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets catalogs by search term.
     * @summary Gets all top level categories.
     * @param {string} storeId The store identifier.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {string} [catalogId] The catalog identifier. If none is specified, the store default catalog shall be used.
     * @param {string} [currency] The currency code to use. Example usage  currency&#x3D;USD. If no currency code is specified, the store default currency shall be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryviewApi
     */
    public storeStoreIdCategoryviewTopGet(storeId: string, responseFormat?: string, catalogId?: string, currency?: string, options?: any) {
        return CategoryviewApiFp(this.configuration).storeStoreIdCategoryviewTopGet(storeId, responseFormat, catalogId, currency, options).then((request) => request(this.axios, this.basePath));
    }
}
