/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { FileUploadJobIBMStoreSummary } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * FileUploadJobApi - axios parameter creator
 * @export
 */
export const FileUploadJobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} fileUploadJobId The file upload job ID.
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request.
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdFileUploadJobFileUploadJobIdGet: async (storeId: string, fileUploadJobId: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobFileUploadJobIdGet', 'storeId', storeId)
            // verify required parameter 'fileUploadJobId' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobFileUploadJobIdGet', 'fileUploadJobId', fileUploadJobId)
            const localVarPath = `/store/{storeId}/file_upload_job/{fileUploadJobId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"fileUploadJobId"}}`, String(fileUploadJobId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (langId !== undefined) {
                localVarQueryParameter['langId'] = langId;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (workspaceName !== undefined) {
                localVarQueryParameter['workspace.name'] = workspaceName;
            }

            if (workspaceTask !== undefined) {
                localVarQueryParameter['workspace.task'] = workspaceTask;
            }

            if (workspaceTaskGroup !== undefined) {
                localVarQueryParameter['workspace.taskGroup'] = workspaceTaskGroup;
            }

            if (forUserId !== undefined) {
                localVarQueryParameter['forUserId'] = forUserId;
            }

            if (forUser !== undefined) {
                localVarQueryParameter['forUser'] = forUser;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {string} numberOfDays Returns the file upload jobs loaded later than the specified number days from current date
         * @param {string} uploadType Returns the file upload jobs of the specified upload type, for example, RequisitionListUpload
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdFileUploadJobGet: async (storeId: string, q: string, numberOfDays: string, uploadType: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobGet', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobGet', 'q', q)
            // verify required parameter 'numberOfDays' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobGet', 'numberOfDays', numberOfDays)
            // verify required parameter 'uploadType' is not null or undefined
            assertParamExists('storeStoreIdFileUploadJobGet', 'uploadType', uploadType)
            const localVarPath = `/store/{storeId}/file_upload_job`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (numberOfDays !== undefined) {
                localVarQueryParameter['numberOfDays'] = numberOfDays;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (langId !== undefined) {
                localVarQueryParameter['langId'] = langId;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (workspaceName !== undefined) {
                localVarQueryParameter['workspace.name'] = workspaceName;
            }

            if (workspaceTask !== undefined) {
                localVarQueryParameter['workspace.task'] = workspaceTask;
            }

            if (workspaceTaskGroup !== undefined) {
                localVarQueryParameter['workspace.taskGroup'] = workspaceTaskGroup;
            }

            if (forUserId !== undefined) {
                localVarQueryParameter['forUserId'] = forUserId;
            }

            if (forUser !== undefined) {
                localVarQueryParameter['forUser'] = forUser;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadJobApi - functional programming interface
 * @export
 */
export const FileUploadJobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadJobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} fileUploadJobId The file upload job ID.
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request.
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdFileUploadJobFileUploadJobIdGet(storeId: string, fileUploadJobId: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadJobIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdFileUploadJobFileUploadJobIdGet(storeId, fileUploadJobId, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {string} numberOfDays Returns the file upload jobs loaded later than the specified number days from current date
         * @param {string} uploadType Returns the file upload jobs of the specified upload type, for example, RequisitionListUpload
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdFileUploadJobGet(storeId: string, q: string, numberOfDays: string, uploadType: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadJobIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdFileUploadJobGet(storeId, q, numberOfDays, uploadType, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadJobApi - factory interface
 * @export
 */
export const FileUploadJobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadJobApiFp(configuration)
    return {
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} fileUploadJobId The file upload job ID.
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request.
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdFileUploadJobFileUploadJobIdGet(storeId: string, fileUploadJobId: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any): AxiosPromise<FileUploadJobIBMStoreSummary> {
            return localVarFp.storeStoreIdFileUploadJobFileUploadJobIdGet(storeId, fileUploadJobId, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds a file upload job by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {string} numberOfDays Returns the file upload jobs loaded later than the specified number days from current date
         * @param {string} uploadType Returns the file upload jobs of the specified upload type, for example, RequisitionListUpload
         * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
         * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
         * @param {string} [workspaceName] Name of the workspace to use for the request.
         * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
         * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request
         * @param {string} [forUserId] User identifier to act on behalf of.
         * @param {string} [forUser] User name to act on behalf of.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdFileUploadJobGet(storeId: string, q: string, numberOfDays: string, uploadType: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any): AxiosPromise<FileUploadJobIBMStoreSummary> {
            return localVarFp.storeStoreIdFileUploadJobGet(storeId, q, numberOfDays, uploadType, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileUploadJobApi - object-oriented interface
 * @export
 * @class FileUploadJobApi
 * @extends {BaseAPI}
 */
export class FileUploadJobApi extends BaseAPI {
    /**
     * 
     * @summary Finds a file upload job by its ID.
     * @param {string} storeId The store identifier.
     * @param {string} fileUploadJobId The file upload job ID.
     * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
     * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
     * @param {string} [workspaceName] Name of the workspace to use for the request.
     * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
     * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request.
     * @param {string} [forUserId] User identifier to act on behalf of.
     * @param {string} [forUser] User name to act on behalf of.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadJobApi
     */
    public storeStoreIdFileUploadJobFileUploadJobIdGet(storeId: string, fileUploadJobId: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any) {
        return FileUploadJobApiFp(this.configuration).storeStoreIdFileUploadJobFileUploadJobIdGet(storeId, fileUploadJobId, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds a file upload job by its ID.
     * @param {string} storeId The store identifier.
     * @param {string} q The query name.
     * @param {string} numberOfDays Returns the file upload jobs loaded later than the specified number days from current date
     * @param {string} uploadType Returns the file upload jobs of the specified upload type, for example, RequisitionListUpload
     * @param {string} [langId] Language identifier. If not specified, the �locale� parameter will be used. If �locale� isn�t specified, then the store default language shall be used.
     * @param {string} [locale] The locale to use.If the �langId� parameter is specified, the �locale� parameter will be ignored. If no locale is specified, the store default locale will be used.
     * @param {string} [workspaceName] Name of the workspace to use for the request.
     * @param {string} [workspaceTask] Identifier of the workspace task to use for the request.
     * @param {string} [workspaceTaskGroup] Identifier of the workspace task group to use for the request
     * @param {string} [forUserId] User identifier to act on behalf of.
     * @param {string} [forUser] User name to act on behalf of.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadJobApi
     */
    public storeStoreIdFileUploadJobGet(storeId: string, q: string, numberOfDays: string, uploadType: string, langId?: string, locale?: string, workspaceName?: string, workspaceTask?: string, workspaceTaskGroup?: string, forUserId?: string, forUser?: string, responseFormat?: string, options?: any) {
        return FileUploadJobApiFp(this.configuration).storeStoreIdFileUploadJobGet(storeId, q, numberOfDays, uploadType, langId, locale, workspaceName, workspaceTask, workspaceTaskGroup, forUserId, forUser, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }
}
