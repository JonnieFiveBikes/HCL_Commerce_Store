/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
/**
 * IndexHandlerApi - axios parameter creator
 * @export
 */
export const IndexHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [masterCatalogId] 
         * @param {string} [fullBuild] 
         * @param {string} [indexType] 
         * @param {string} [indexSubType] 
         * @param {string} [localeName] 
         * @param {boolean} [validateIndex] 
         * @param {boolean} [runCategoryRules] 
         * @param {string} [storeId] 
         * @param {string} [catentryId] 
         * @param {string} [contractId] 
         * @param {string} [currency] 
         * @param {string} [numWorkers] 
         * @param {string} [flushSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminIndexDataImportBuildPost: async (masterCatalogId?: string, fullBuild?: string, indexType?: string, indexSubType?: string, localeName?: string, validateIndex?: boolean, runCategoryRules?: boolean, storeId?: string, catentryId?: string, contractId?: string, currency?: string, numWorkers?: string, flushSize?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/index/dataImport/build`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (masterCatalogId !== undefined) {
                localVarQueryParameter['masterCatalogId'] = masterCatalogId;
            }

            if (fullBuild !== undefined) {
                localVarQueryParameter['fullBuild'] = fullBuild;
            }

            if (indexType !== undefined) {
                localVarQueryParameter['indexType'] = indexType;
            }

            if (indexSubType !== undefined) {
                localVarQueryParameter['indexSubType'] = indexSubType;
            }

            if (localeName !== undefined) {
                localVarQueryParameter['localeName'] = localeName;
            }

            if (validateIndex !== undefined) {
                localVarQueryParameter['validateIndex'] = validateIndex;
            }

            if (runCategoryRules !== undefined) {
                localVarQueryParameter['runCategoryRules'] = runCategoryRules;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (catentryId !== undefined) {
                localVarQueryParameter['catentryId'] = catentryId;
            }

            if (contractId !== undefined) {
                localVarQueryParameter['contractId'] = contractId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (numWorkers !== undefined) {
                localVarQueryParameter['numWorkers'] = numWorkers;
            }

            if (flushSize !== undefined) {
                localVarQueryParameter['flushSize'] = flushSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [jobStatusId] 
         * @param {string} [detailInfo] 
         * @param {string} [responseFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminIndexDataImportStatusGet: async (jobStatusId?: string, detailInfo?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/index/dataImport/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobStatusId !== undefined) {
                localVarQueryParameter['jobStatusId'] = jobStatusId;
            }

            if (detailInfo !== undefined) {
                localVarQueryParameter['detailInfo'] = detailInfo;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexHandlerApi - functional programming interface
 * @export
 */
export const IndexHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [masterCatalogId] 
         * @param {string} [fullBuild] 
         * @param {string} [indexType] 
         * @param {string} [indexSubType] 
         * @param {string} [localeName] 
         * @param {boolean} [validateIndex] 
         * @param {boolean} [runCategoryRules] 
         * @param {string} [storeId] 
         * @param {string} [catentryId] 
         * @param {string} [contractId] 
         * @param {string} [currency] 
         * @param {string} [numWorkers] 
         * @param {string} [flushSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminIndexDataImportBuildPost(masterCatalogId?: string, fullBuild?: string, indexType?: string, indexSubType?: string, localeName?: string, validateIndex?: boolean, runCategoryRules?: boolean, storeId?: string, catentryId?: string, contractId?: string, currency?: string, numWorkers?: string, flushSize?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminIndexDataImportBuildPost(masterCatalogId, fullBuild, indexType, indexSubType, localeName, validateIndex, runCategoryRules, storeId, catentryId, contractId, currency, numWorkers, flushSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [jobStatusId] 
         * @param {string} [detailInfo] 
         * @param {string} [responseFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminIndexDataImportStatusGet(jobStatusId?: string, detailInfo?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminIndexDataImportStatusGet(jobStatusId, detailInfo, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndexHandlerApi - factory interface
 * @export
 */
export const IndexHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexHandlerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [masterCatalogId] 
         * @param {string} [fullBuild] 
         * @param {string} [indexType] 
         * @param {string} [indexSubType] 
         * @param {string} [localeName] 
         * @param {boolean} [validateIndex] 
         * @param {boolean} [runCategoryRules] 
         * @param {string} [storeId] 
         * @param {string} [catentryId] 
         * @param {string} [contractId] 
         * @param {string} [currency] 
         * @param {string} [numWorkers] 
         * @param {string} [flushSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminIndexDataImportBuildPost(masterCatalogId?: string, fullBuild?: string, indexType?: string, indexSubType?: string, localeName?: string, validateIndex?: boolean, runCategoryRules?: boolean, storeId?: string, catentryId?: string, contractId?: string, currency?: string, numWorkers?: string, flushSize?: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminIndexDataImportBuildPost(masterCatalogId, fullBuild, indexType, indexSubType, localeName, validateIndex, runCategoryRules, storeId, catentryId, contractId, currency, numWorkers, flushSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [jobStatusId] 
         * @param {string} [detailInfo] 
         * @param {string} [responseFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminIndexDataImportStatusGet(jobStatusId?: string, detailInfo?: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminIndexDataImportStatusGet(jobStatusId, detailInfo, responseFormat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexHandlerApi - object-oriented interface
 * @export
 * @class IndexHandlerApi
 * @extends {BaseAPI}
 */
export class IndexHandlerApi extends BaseAPI {
    /**
     * 
     * @param {string} [masterCatalogId] 
     * @param {string} [fullBuild] 
     * @param {string} [indexType] 
     * @param {string} [indexSubType] 
     * @param {string} [localeName] 
     * @param {boolean} [validateIndex] 
     * @param {boolean} [runCategoryRules] 
     * @param {string} [storeId] 
     * @param {string} [catentryId] 
     * @param {string} [contractId] 
     * @param {string} [currency] 
     * @param {string} [numWorkers] 
     * @param {string} [flushSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexHandlerApi
     */
    public adminIndexDataImportBuildPost(masterCatalogId?: string, fullBuild?: string, indexType?: string, indexSubType?: string, localeName?: string, validateIndex?: boolean, runCategoryRules?: boolean, storeId?: string, catentryId?: string, contractId?: string, currency?: string, numWorkers?: string, flushSize?: string, options?: any) {
        return IndexHandlerApiFp(this.configuration).adminIndexDataImportBuildPost(masterCatalogId, fullBuild, indexType, indexSubType, localeName, validateIndex, runCategoryRules, storeId, catentryId, contractId, currency, numWorkers, flushSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [jobStatusId] 
     * @param {string} [detailInfo] 
     * @param {string} [responseFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexHandlerApi
     */
    public adminIndexDataImportStatusGet(jobStatusId?: string, detailInfo?: string, responseFormat?: string, options?: any) {
        return IndexHandlerApiFp(this.configuration).adminIndexDataImportStatusGet(jobStatusId, detailInfo, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }
}
