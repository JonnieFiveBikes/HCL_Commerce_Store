/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { ComIbmCommerceRestSchedulerHandlerJobHandlerCreateJobResponse } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { ComIbmCommerceSchedulerBeansJobDataBeanIBMAdminSummary } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findJobById.
         * @param {string} storeId storeId.
         * @param {string} jobId jobId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdJobJobIdGet: async (storeId: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdJobJobIdGet', 'storeId', storeId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('storeStoreIdJobJobIdGet', 'jobId', jobId)
            const localVarPath = `/store/{storeId}/job/{jobId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"jobId"}}`, String(jobId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createJob.
         * @param {string} storeId storeId.
         * @param {string} [body] The body data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdJobPost: async (storeId: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdJobPost', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/job`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (body !== undefined) {
                localVarQueryParameter['body'] = body;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary findJobById.
         * @param {string} storeId storeId.
         * @param {string} jobId jobId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdJobJobIdGet(storeId: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceSchedulerBeansJobDataBeanIBMAdminSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdJobJobIdGet(storeId, jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createJob.
         * @param {string} storeId storeId.
         * @param {string} [body] The body data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdJobPost(storeId: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceRestSchedulerHandlerJobHandlerCreateJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdJobPost(storeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * 
         * @summary findJobById.
         * @param {string} storeId storeId.
         * @param {string} jobId jobId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdJobJobIdGet(storeId: string, jobId: string, options?: any): AxiosPromise<ComIbmCommerceSchedulerBeansJobDataBeanIBMAdminSummary> {
            return localVarFp.storeStoreIdJobJobIdGet(storeId, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createJob.
         * @param {string} storeId storeId.
         * @param {string} [body] The body data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdJobPost(storeId: string, body?: string, options?: any): AxiosPromise<ComIbmCommerceRestSchedulerHandlerJobHandlerCreateJobResponse> {
            return localVarFp.storeStoreIdJobPost(storeId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
    /**
     * 
     * @summary findJobById.
     * @param {string} storeId storeId.
     * @param {string} jobId jobId.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public storeStoreIdJobJobIdGet(storeId: string, jobId: string, options?: any) {
        return JobApiFp(this.configuration).storeStoreIdJobJobIdGet(storeId, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createJob.
     * @param {string} storeId storeId.
     * @param {string} [body] The body data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public storeStoreIdJobPost(storeId: string, body?: string, options?: any) {
        return JobApiFp(this.configuration).storeStoreIdJobPost(storeId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
