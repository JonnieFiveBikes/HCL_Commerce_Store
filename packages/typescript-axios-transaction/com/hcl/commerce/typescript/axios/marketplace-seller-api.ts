/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Services - Account and Contract
 * These services provide APIs to manage accounts and contracts.  a contract is an agreement that represents the terms and conditions that apply to a transaction. An account is a relationship between the merchant and the financial institution that processes transactions for that merchant.
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { SellerCollection } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * MarketplaceSellerApi - axios parameter creator
 * @export
 */
export const MarketplaceSellerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get active marketplace sellers for a store.
         * @summary Get active marketplace sellers for a store.
         * @param {string} storeId The store id.
         * @param {string} [langId] The return language for marketplace seller name and description. The store default language is used if missing.
         * @param {number} [offset] The position within the resulting dataset where the query begins returning item records. If the offset is \&quot;5\&quot;, the records that returned begin with the sixth record that matches the query parameters. If the offset is \&quot;0\&quot;, the records that are returned begin with the first record that matches the query parameters.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveMarketplaceSellerByStoreId: async (storeId: string, langId?: string, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('findActiveMarketplaceSellerByStoreId', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/marketplace-sellers`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (langId !== undefined) {
                localVarQueryParameter['langId'] = langId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketplaceSellerApi - functional programming interface
 * @export
 */
export const MarketplaceSellerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketplaceSellerApiAxiosParamCreator(configuration)
    return {
        /**
         * Get active marketplace sellers for a store.
         * @summary Get active marketplace sellers for a store.
         * @param {string} storeId The store id.
         * @param {string} [langId] The return language for marketplace seller name and description. The store default language is used if missing.
         * @param {number} [offset] The position within the resulting dataset where the query begins returning item records. If the offset is \&quot;5\&quot;, the records that returned begin with the sixth record that matches the query parameters. If the offset is \&quot;0\&quot;, the records that are returned begin with the first record that matches the query parameters.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findActiveMarketplaceSellerByStoreId(storeId: string, langId?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellerCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findActiveMarketplaceSellerByStoreId(storeId, langId, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarketplaceSellerApi - factory interface
 * @export
 */
export const MarketplaceSellerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketplaceSellerApiFp(configuration)
    return {
        /**
         * Get active marketplace sellers for a store.
         * @summary Get active marketplace sellers for a store.
         * @param {string} storeId The store id.
         * @param {string} [langId] The return language for marketplace seller name and description. The store default language is used if missing.
         * @param {number} [offset] The position within the resulting dataset where the query begins returning item records. If the offset is \&quot;5\&quot;, the records that returned begin with the sixth record that matches the query parameters. If the offset is \&quot;0\&quot;, the records that are returned begin with the first record that matches the query parameters.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveMarketplaceSellerByStoreId(storeId: string, langId?: string, offset?: number, limit?: number, options?: any): AxiosPromise<SellerCollection> {
            return localVarFp.findActiveMarketplaceSellerByStoreId(storeId, langId, offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketplaceSellerApi - object-oriented interface
 * @export
 * @class MarketplaceSellerApi
 * @extends {BaseAPI}
 */
export class MarketplaceSellerApi extends BaseAPI {
    /**
     * Get active marketplace sellers for a store.
     * @summary Get active marketplace sellers for a store.
     * @param {string} storeId The store id.
     * @param {string} [langId] The return language for marketplace seller name and description. The store default language is used if missing.
     * @param {number} [offset] The position within the resulting dataset where the query begins returning item records. If the offset is \&quot;5\&quot;, the records that returned begin with the sixth record that matches the query parameters. If the offset is \&quot;0\&quot;, the records that are returned begin with the first record that matches the query parameters.
     * @param {number} [limit] The maximum number of records to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceSellerApi
     */
    public findActiveMarketplaceSellerByStoreId(storeId: string, langId?: string, offset?: number, limit?: number, options?: any) {
        return MarketplaceSellerApiFp(this.configuration).findActiveMarketplaceSellerByStoreId(storeId, langId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
