/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { PageIBMStoreDetails } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { PageIBMStoreDetailsSEO } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Finds pages by category IDs. Invalid category IDs are ignored.
         * @summary Get by category ID
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<string>} categoryId The category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageByCategoryIds: async (storeId: string, q: string, categoryId: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('pageByCategoryIds', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('pageByCategoryIds', 'q', q)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('pageByCategoryIds', 'categoryId', categoryId)
            const localVarPath = `/store/{storeId}/page`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (categoryId) {
                localVarQueryParameter['categoryId'] = categoryId.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a page by its name.
         * @summary Get by name
         * @param {string} storeId The store identifier.
         * @param {string} name The page name.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindByName: async (storeId: string, name: string, profileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('pageFindByName', 'storeId', storeId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pageFindByName', 'name', name)
            // verify required parameter 'profileName' is not null or undefined
            assertParamExists('pageFindByName', 'profileName', profileName)
            const localVarPath = `/store/{storeId}/page/name/{name}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"name"}}`, String(name));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileName !== undefined) {
                localVarQueryParameter['profileName'] = profileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a page by its ID.
         * @summary Get by page ID
         * @param {string} storeId The store identifier.
         * @param {string} pageId The page ID.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindByPageId: async (storeId: string, pageId: string, profileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('pageFindByPageId', 'storeId', storeId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('pageFindByPageId', 'pageId', pageId)
            // verify required parameter 'profileName' is not null or undefined
            assertParamExists('pageFindByPageId', 'profileName', profileName)
            const localVarPath = `/store/{storeId}/page/{pageId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"pageId"}}`, String(pageId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileName !== undefined) {
                localVarQueryParameter['profileName'] = profileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * Finds pages by category IDs. Invalid category IDs are ignored.
         * @summary Get by category ID
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<string>} categoryId The category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageByCategoryIds(storeId: string, q: string, categoryId: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIBMStoreDetailsSEO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageByCategoryIds(storeId, q, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds a page by its name.
         * @summary Get by name
         * @param {string} storeId The store identifier.
         * @param {string} name The page name.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageFindByName(storeId: string, name: string, profileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIBMStoreDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageFindByName(storeId, name, profileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds a page by its ID.
         * @summary Get by page ID
         * @param {string} storeId The store identifier.
         * @param {string} pageId The page ID.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageFindByPageId(storeId: string, pageId: string, profileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIBMStoreDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageFindByPageId(storeId, pageId, profileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * Finds pages by category IDs. Invalid category IDs are ignored.
         * @summary Get by category ID
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<string>} categoryId The category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageByCategoryIds(storeId: string, q: string, categoryId: Array<string>, options?: any): AxiosPromise<PageIBMStoreDetailsSEO> {
            return localVarFp.pageByCategoryIds(storeId, q, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds a page by its name.
         * @summary Get by name
         * @param {string} storeId The store identifier.
         * @param {string} name The page name.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindByName(storeId: string, name: string, profileName: string, options?: any): AxiosPromise<PageIBMStoreDetails> {
            return localVarFp.pageFindByName(storeId, name, profileName, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds a page by its ID.
         * @summary Get by page ID
         * @param {string} storeId The store identifier.
         * @param {string} pageId The page ID.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindByPageId(storeId: string, pageId: string, profileName: string, options?: any): AxiosPromise<PageIBMStoreDetails> {
            return localVarFp.pageFindByPageId(storeId, pageId, profileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * Finds pages by category IDs. Invalid category IDs are ignored.
     * @summary Get by category ID
     * @param {string} storeId The store identifier.
     * @param {string} q The query name.
     * @param {Array<string>} categoryId The category ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public pageByCategoryIds(storeId: string, q: string, categoryId: Array<string>, options?: any) {
        return PageApiFp(this.configuration).pageByCategoryIds(storeId, q, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds a page by its name.
     * @summary Get by name
     * @param {string} storeId The store identifier.
     * @param {string} name The page name.
     * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public pageFindByName(storeId: string, name: string, profileName: string, options?: any) {
        return PageApiFp(this.configuration).pageFindByName(storeId, name, profileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds a page by its ID.
     * @summary Get by page ID
     * @param {string} storeId The store identifier.
     * @param {string} pageId The page ID.
     * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public pageFindByPageId(storeId: string, pageId: string, profileName: string, options?: any) {
        return PageApiFp(this.configuration).pageFindByPageId(storeId, pageId, profileName, options).then((request) => request(this.axios, this.basePath));
    }
}
