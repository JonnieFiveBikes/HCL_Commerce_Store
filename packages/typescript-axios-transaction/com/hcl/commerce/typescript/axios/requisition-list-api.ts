/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Services - *
 * These services provide APIs to interact with transaction
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { ComIbmCommerceOrderBeansRequisitionListDataBeanIBMStoreSummary } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitResponse } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * RequisitionListApi - axios parameter creator
 * @export
 */
export const RequisitionListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finds requisition lists that can be used by the current user.
         * @param {string} storeId The store identifier.
         * @param {string} q the query name.
         * @param {string} [orderBy] Order by.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListGet: async (storeId: string, q: string, orderBy?: string, pageNumber?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListGet', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListGet', 'q', q)
            const localVarPath = `/store/{storeId}/requisition_list`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest} [body] The request body for adding pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListPost: async (storeId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListPost', 'storeId', storeId)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListPost', 'action', action)
            const localVarPath = `/store/{storeId}/requisition_list`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdDelete: async (storeId: string, requisitionListId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdDelete', 'storeId', storeId)
            // verify required parameter 'requisitionListId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdDelete', 'requisitionListId', requisitionListId)
            const localVarPath = `/store/{storeId}/requisition_list/{requisitionListId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"requisitionListId"}}`, String(requisitionListId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds a requisition list by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdGet: async (storeId: string, requisitionListId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdGet', 'storeId', storeId)
            // verify required parameter 'requisitionListId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdGet', 'requisitionListId', requisitionListId)
            const localVarPath = `/store/{storeId}/requisition_list/{requisitionListId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"requisitionListId"}}`, String(requisitionListId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest} [body] The request body for submitting a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdPost: async (storeId: string, requisitionListId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdPost', 'storeId', storeId)
            // verify required parameter 'requisitionListId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdPost', 'requisitionListId', requisitionListId)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdPost', 'action', action)
            const localVarPath = `/store/{storeId}/requisition_list/{requisitionListId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"requisitionListId"}}`, String(requisitionListId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest} [body] The request body for updating a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdPut: async (storeId: string, requisitionListId: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdPut', 'storeId', storeId)
            // verify required parameter 'requisitionListId' is not null or undefined
            assertParamExists('storeStoreIdRequisitionListRequisitionListIdPut', 'requisitionListId', requisitionListId)
            const localVarPath = `/store/{storeId}/requisition_list/{requisitionListId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"requisitionListId"}}`, String(requisitionListId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequisitionListApi - functional programming interface
 * @export
 */
export const RequisitionListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequisitionListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Finds requisition lists that can be used by the current user.
         * @param {string} storeId The store identifier.
         * @param {string} q the query name.
         * @param {string} [orderBy] Order by.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListGet(storeId: string, q: string, orderBy?: string, pageNumber?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceOrderBeansRequisitionListDataBeanIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListGet(storeId, q, orderBy, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest} [body] The request body for adding pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListPost(storeId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListPost(storeId, action, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListRequisitionListIdDelete(storeId: string, requisitionListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListRequisitionListIdDelete(storeId, requisitionListId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds a requisition list by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListRequisitionListIdGet(storeId: string, requisitionListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceOrderBeansRequisitionListDataBeanIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListRequisitionListIdGet(storeId, requisitionListId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submits a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest} [body] The request body for submitting a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListRequisitionListIdPost(storeId: string, requisitionListId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListRequisitionListIdPost(storeId, requisitionListId, action, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest} [body] The request body for updating a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdRequisitionListRequisitionListIdPut(storeId: string, requisitionListId: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdRequisitionListRequisitionListIdPut(storeId, requisitionListId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequisitionListApi - factory interface
 * @export
 */
export const RequisitionListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequisitionListApiFp(configuration)
    return {
        /**
         * 
         * @summary Finds requisition lists that can be used by the current user.
         * @param {string} storeId The store identifier.
         * @param {string} q the query name.
         * @param {string} [orderBy] Order by.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListGet(storeId: string, q: string, orderBy?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<ComIbmCommerceOrderBeansRequisitionListDataBeanIBMStoreSummary> {
            return localVarFp.storeStoreIdRequisitionListGet(storeId, q, orderBy, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest} [body] The request body for adding pre-configured dynamic kits or dynamic kit configurations to a requisition list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListPost(storeId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest, options?: any): AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest> {
            return localVarFp.storeStoreIdRequisitionListPost(storeId, action, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdDelete(storeId: string, requisitionListId: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdRequisitionListRequisitionListIdDelete(storeId, requisitionListId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds a requisition list by its ID.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdGet(storeId: string, requisitionListId: string, options?: any): AxiosPromise<ComIbmCommerceOrderBeansRequisitionListDataBeanIBMStoreSummary> {
            return localVarFp.storeStoreIdRequisitionListRequisitionListIdGet(storeId, requisitionListId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {string} action the action.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest} [body] The request body for submitting a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdPost(storeId: string, requisitionListId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest, options?: any): AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitResponse> {
            return localVarFp.storeStoreIdRequisitionListRequisitionListIdPost(storeId, requisitionListId, action, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a requisition list.
         * @param {string} storeId The store identifier.
         * @param {string} requisitionListId The requisition list ID.
         * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest} [body] The request body for updating a requisition list by requisition list id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdRequisitionListRequisitionListIdPut(storeId: string, requisitionListId: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest, options?: any): AxiosPromise<ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest> {
            return localVarFp.storeStoreIdRequisitionListRequisitionListIdPut(storeId, requisitionListId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequisitionListApi - object-oriented interface
 * @export
 * @class RequisitionListApi
 * @extends {BaseAPI}
 */
export class RequisitionListApi extends BaseAPI {
    /**
     * 
     * @summary Finds requisition lists that can be used by the current user.
     * @param {string} storeId The store identifier.
     * @param {string} q the query name.
     * @param {string} [orderBy] Order by.
     * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
     * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListGet(storeId: string, q: string, orderBy?: string, pageNumber?: number, pageSize?: number, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListGet(storeId, q, orderBy, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add pre-configured dynamic kits or dynamic kit configurations to a requisition list.
     * @param {string} storeId The store identifier.
     * @param {string} action the action.
     * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest} [body] The request body for adding pre-configured dynamic kits or dynamic kit configurations to a requisition list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListPost(storeId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListConfigurationAddRequest, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListPost(storeId, action, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a requisition list.
     * @param {string} storeId The store identifier.
     * @param {string} requisitionListId The requisition list ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListRequisitionListIdDelete(storeId: string, requisitionListId: string, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListRequisitionListIdDelete(storeId, requisitionListId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds a requisition list by its ID.
     * @param {string} storeId The store identifier.
     * @param {string} requisitionListId The requisition list ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListRequisitionListIdGet(storeId: string, requisitionListId: string, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListRequisitionListIdGet(storeId, requisitionListId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits a requisition list.
     * @param {string} storeId The store identifier.
     * @param {string} requisitionListId The requisition list ID.
     * @param {string} action the action.
     * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest} [body] The request body for submitting a requisition list by requisition list id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListRequisitionListIdPost(storeId: string, requisitionListId: string, action: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListSubmitRequest, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListRequisitionListIdPost(storeId, requisitionListId, action, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a requisition list.
     * @param {string} storeId The store identifier.
     * @param {string} requisitionListId The requisition list ID.
     * @param {ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest} [body] The request body for updating a requisition list by requisition list id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListApi
     */
    public storeStoreIdRequisitionListRequisitionListIdPut(storeId: string, requisitionListId: string, body?: ComIbmCommerceRestRequisitionlistHandlerRequisitionListHandlerRequisitionListUpdateRequest, options?: any) {
        return RequisitionListApiFp(this.configuration).storeStoreIdRequisitionListRequisitionListIdPut(storeId, requisitionListId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
