/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { TaskIBMAdminAll } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change task status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} actionType The change status action to perform on task.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskChangeStatusPut: async (storeId: string, taskeId: string, taskGroupId: string, actionType: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskChangeStatusPut', 'storeId', storeId)
            // verify required parameter 'taskeId' is not null or undefined
            assertParamExists('storeStoreIdTaskChangeStatusPut', 'taskeId', taskeId)
            // verify required parameter 'taskGroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskChangeStatusPut', 'taskGroupId', taskGroupId)
            // verify required parameter 'actionType' is not null or undefined
            assertParamExists('storeStoreIdTaskChangeStatusPut', 'actionType', actionType)
            const localVarPath = `/store/{storeId}/task/changeStatus`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskeId !== undefined) {
                localVarQueryParameter['taskeId'] = taskeId;
            }

            if (taskGroupId !== undefined) {
                localVarQueryParameter['taskGroupId'] = taskGroupId;
            }

            if (actionType !== undefined) {
                localVarQueryParameter['actionType'] = actionType;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a task.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskCreateTaskPost: async (storeId: string, taskgroupId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskCreateTaskPost', 'storeId', storeId)
            // verify required parameter 'taskgroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskCreateTaskPost', 'taskgroupId', taskgroupId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('storeStoreIdTaskCreateTaskPost', 'name', name)
            const localVarPath = `/store/{storeId}/task/createTask`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskgroupId !== undefined) {
                localVarQueryParameter['taskgroupId'] = taskgroupId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (contributors !== undefined) {
                localVarQueryParameter['contributors'] = contributors;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds tasks by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q the query name .
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGet: async (storeId: string, q: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGet', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('storeStoreIdTaskGet', 'q', q)
            const localVarPath = `/store/{storeId}/task`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds a task by its ID.
         * @param {string} storeId the store identifier.
         * @param {string} taskId The task identifier.
         * @param {string} [profileName] Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskTaskIdTaskIdGet: async (storeId: string, taskId: string, profileName?: string, pageNumber?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskTaskIdTaskIdGet', 'storeId', storeId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('storeStoreIdTaskTaskIdTaskIdGet', 'taskId', taskId)
            const localVarPath = `/store/{storeId}/task/taskId/{taskId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"taskId"}}`, String(taskId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileName !== undefined) {
                localVarQueryParameter['profileName'] = profileName;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a task..
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskUpdateTaskPut: async (storeId: string, taskeId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskUpdateTaskPut', 'storeId', storeId)
            // verify required parameter 'taskeId' is not null or undefined
            assertParamExists('storeStoreIdTaskUpdateTaskPut', 'taskeId', taskeId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('storeStoreIdTaskUpdateTaskPut', 'name', name)
            const localVarPath = `/store/{storeId}/task/updateTask`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskeId !== undefined) {
                localVarQueryParameter['taskeId'] = taskeId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (contributors !== undefined) {
                localVarQueryParameter['contributors'] = contributors;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change task status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} actionType The change status action to perform on task.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskChangeStatusPut(storeId: string, taskeId: string, taskGroupId: string, actionType: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskChangeStatusPut(storeId, taskeId, taskGroupId, actionType, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a task.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskCreateTaskPost(storeId: string, taskgroupId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskCreateTaskPost(storeId, taskgroupId, name, description, dueDate, contributors, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds tasks by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q the query name .
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGet(storeId: string, q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGet(storeId, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds a task by its ID.
         * @param {string} storeId the store identifier.
         * @param {string} taskId The task identifier.
         * @param {string} [profileName] Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskTaskIdTaskIdGet(storeId: string, taskId: string, profileName?: string, pageNumber?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskIBMAdminAll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskTaskIdTaskIdGet(storeId, taskId, profileName, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a task..
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskUpdateTaskPut(storeId: string, taskeId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskUpdateTaskPut(storeId, taskeId, name, description, dueDate, contributors, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @summary Change task status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} actionType The change status action to perform on task.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskChangeStatusPut(storeId: string, taskeId: string, taskGroupId: string, actionType: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskChangeStatusPut(storeId, taskeId, taskGroupId, actionType, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a task.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskCreateTaskPost(storeId: string, taskgroupId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskCreateTaskPost(storeId, taskgroupId, name, description, dueDate, contributors, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds tasks by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q the query name .
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGet(storeId: string, q: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGet(storeId, q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds a task by its ID.
         * @param {string} storeId the store identifier.
         * @param {string} taskId The task identifier.
         * @param {string} [profileName] Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskTaskIdTaskIdGet(storeId: string, taskId: string, profileName?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<TaskIBMAdminAll> {
            return localVarFp.storeStoreIdTaskTaskIdTaskIdGet(storeId, taskId, profileName, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a task..
         * @param {string} storeId the store identifier.
         * @param {string} taskeId The task identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskUpdateTaskPut(storeId: string, taskeId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskUpdateTaskPut(storeId, taskeId, name, description, dueDate, contributors, responseFormat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @summary Change task status by performing an action on it.
     * @param {string} storeId the store identifier.
     * @param {string} taskeId The task identifier.
     * @param {string} taskGroupId The task group identifier.
     * @param {string} actionType The change status action to perform on task.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public storeStoreIdTaskChangeStatusPut(storeId: string, taskeId: string, taskGroupId: string, actionType: string, responseFormat?: string, options?: any) {
        return TaskApiFp(this.configuration).storeStoreIdTaskChangeStatusPut(storeId, taskeId, taskGroupId, actionType, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a task.
     * @param {string} storeId the store identifier.
     * @param {string} taskgroupId The taskgroupId identifier.
     * @param {string} name The name of the task group.
     * @param {string} [description] The description of the task group.
     * @param {string} [dueDate] Date and time the task group is due.
     * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public storeStoreIdTaskCreateTaskPost(storeId: string, taskgroupId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any) {
        return TaskApiFp(this.configuration).storeStoreIdTaskCreateTaskPost(storeId, taskgroupId, name, description, dueDate, contributors, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds tasks by a query. See each query for details on input and output.
     * @param {string} storeId the store identifier.
     * @param {string} q the query name .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public storeStoreIdTaskGet(storeId: string, q: string, options?: any) {
        return TaskApiFp(this.configuration).storeStoreIdTaskGet(storeId, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds a task by its ID.
     * @param {string} storeId the store identifier.
     * @param {string} taskId The task identifier.
     * @param {string} [profileName] Profile name. Profiles determine the subset of data to be returned by a query.
     * @param {number} [pageNumber] Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work.
     * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public storeStoreIdTaskTaskIdTaskIdGet(storeId: string, taskId: string, profileName?: string, pageNumber?: number, pageSize?: number, options?: any) {
        return TaskApiFp(this.configuration).storeStoreIdTaskTaskIdTaskIdGet(storeId, taskId, profileName, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a task..
     * @param {string} storeId the store identifier.
     * @param {string} taskeId The task identifier.
     * @param {string} name The name of the task group.
     * @param {string} [description] The description of the task group.
     * @param {string} [dueDate] Date and time the task group is due.
     * @param {string} [contributors] The list of contributors for the task. Separate multiple with a comma.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public storeStoreIdTaskUpdateTaskPut(storeId: string, taskeId: string, name: string, description?: string, dueDate?: string, contributors?: string, responseFormat?: string, options?: any) {
        return TaskApiFp(this.configuration).storeStoreIdTaskUpdateTaskPut(storeId, taskeId, name, description, dueDate, contributors, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }
}
