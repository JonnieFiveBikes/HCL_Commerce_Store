/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { TaskGroupIBMAdminAll } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * TaskGroupApi - axios parameter creator
 * @export
 */
export const TaskGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change task group status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} actionType The change status action to perform on task group.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupChangeStatusPut: async (storeId: string, taskgroupId: string, actionType: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupChangeStatusPut', 'storeId', storeId)
            // verify required parameter 'taskgroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupChangeStatusPut', 'taskgroupId', taskgroupId)
            // verify required parameter 'actionType' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupChangeStatusPut', 'actionType', actionType)
            const localVarPath = `/store/{storeId}/task_group/changeStatus`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskgroupId !== undefined) {
                localVarQueryParameter['taskgroupId'] = taskgroupId;
            }

            if (actionType !== undefined) {
                localVarQueryParameter['actionType'] = actionType;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a task group comment.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} comment The taskgroup comment.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupCreateTaskGroupCommentPost: async (storeId: string, taskgroupId: string, comment: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupCommentPost', 'storeId', storeId)
            // verify required parameter 'taskgroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupCommentPost', 'taskgroupId', taskgroupId)
            // verify required parameter 'comment' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupCommentPost', 'comment', comment)
            const localVarPath = `/store/{storeId}/task_group/createTaskGroupComment`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskgroupId !== undefined) {
                localVarQueryParameter['taskgroupId'] = taskgroupId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupCreateTaskGroupPost: async (storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupPost', 'storeId', storeId)
            // verify required parameter 'taskgroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupPost', 'taskgroupId', taskgroupId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupCreateTaskGroupPost', 'name', name)
            const localVarPath = `/store/{storeId}/task_group/createTaskGroup`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskgroupId !== undefined) {
                localVarQueryParameter['taskgroupId'] = taskgroupId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (quickPublish !== undefined) {
                localVarQueryParameter['quickPublish'] = quickPublish;
            }

            if (persistent !== undefined) {
                localVarQueryParameter['persistent'] = persistent;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (promotionDate !== undefined) {
                localVarQueryParameter['promotionDate'] = promotionDate;
            }

            if (approvers !== undefined) {
                localVarQueryParameter['approvers'] = approvers;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds task groups by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q The task group identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupGet: async (storeId: string, q: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupGet', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupGet', 'q', q)
            const localVarPath = `/store/{storeId}/task_group`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds a task group by its ID..
         * @param {string} storeId the store identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} profileName Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} pageNumber Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work..
         * @param {number} pageSize age size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet: async (storeId: string, taskGroupId: string, profileName: string, pageNumber: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet', 'storeId', storeId)
            // verify required parameter 'taskGroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet', 'taskGroupId', taskGroupId)
            // verify required parameter 'profileName' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet', 'profileName', profileName)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet', 'pageSize', pageSize)
            const localVarPath = `/store/{storeId}/task_group/taskGroupId/{taskGroupId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"taskGroupId"}}`, String(taskGroupId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileName !== undefined) {
                localVarQueryParameter['profileName'] = profileName;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupUpdateTaskGroupPut: async (storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupUpdateTaskGroupPut', 'storeId', storeId)
            // verify required parameter 'taskgroupId' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupUpdateTaskGroupPut', 'taskgroupId', taskgroupId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('storeStoreIdTaskGroupUpdateTaskGroupPut', 'name', name)
            const localVarPath = `/store/{storeId}/task_group/updateTaskGroup`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskgroupId !== undefined) {
                localVarQueryParameter['taskgroupId'] = taskgroupId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (quickPublish !== undefined) {
                localVarQueryParameter['quickPublish'] = quickPublish;
            }

            if (persistent !== undefined) {
                localVarQueryParameter['persistent'] = persistent;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (promotionDate !== undefined) {
                localVarQueryParameter['promotionDate'] = promotionDate;
            }

            if (approvers !== undefined) {
                localVarQueryParameter['approvers'] = approvers;
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['responseFormat'] = responseFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskGroupApi - functional programming interface
 * @export
 */
export const TaskGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change task group status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} actionType The change status action to perform on task group.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupChangeStatusPut(storeId: string, taskgroupId: string, actionType: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupChangeStatusPut(storeId, taskgroupId, actionType, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a task group comment.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} comment The taskgroup comment.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId: string, taskgroupId: string, comment: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId, taskgroupId, comment, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupCreateTaskGroupPost(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupCreateTaskGroupPost(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds task groups by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q The task group identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupGet(storeId: string, q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupGet(storeId, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds a task group by its ID..
         * @param {string} storeId the store identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} profileName Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} pageNumber Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work..
         * @param {number} pageSize age size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId: string, taskGroupId: string, profileName: string, pageNumber: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskGroupIBMAdminAll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId, taskGroupId, profileName, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreIdTaskGroupUpdateTaskGroupPut(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreIdTaskGroupUpdateTaskGroupPut(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskGroupApi - factory interface
 * @export
 */
export const TaskGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Change task group status by performing an action on it.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} actionType The change status action to perform on task group.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupChangeStatusPut(storeId: string, taskgroupId: string, actionType: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGroupChangeStatusPut(storeId, taskgroupId, actionType, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a task group comment.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} comment The taskgroup comment.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId: string, taskgroupId: string, comment: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId, taskgroupId, comment, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupCreateTaskGroupPost(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGroupCreateTaskGroupPost(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds task groups by a query. See each query for details on input and output.
         * @param {string} storeId the store identifier.
         * @param {string} q The task group identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupGet(storeId: string, q: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGroupGet(storeId, q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds a task group by its ID..
         * @param {string} storeId the store identifier.
         * @param {string} taskGroupId The task group identifier.
         * @param {string} profileName Profile name. Profiles determine the subset of data to be returned by a query.
         * @param {number} pageNumber Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work..
         * @param {number} pageSize age size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId: string, taskGroupId: string, profileName: string, pageNumber: number, pageSize: number, options?: any): AxiosPromise<TaskGroupIBMAdminAll> {
            return localVarFp.storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId, taskGroupId, profileName, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a task group.
         * @param {string} storeId the store identifier.
         * @param {string} taskgroupId The taskgroupId identifier.
         * @param {string} name The name of the task group.
         * @param {string} [description] The description of the task group.
         * @param {string} [quickPublish] Whether to quick publish task group.
         * @param {string} [persistent] Whether task group is persistent.
         * @param {string} [dueDate] Date and time the task group is due.
         * @param {string} [promotionDate] Date and time to commit task group.
         * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
         * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreIdTaskGroupUpdateTaskGroupPut(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.storeStoreIdTaskGroupUpdateTaskGroupPut(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskGroupApi - object-oriented interface
 * @export
 * @class TaskGroupApi
 * @extends {BaseAPI}
 */
export class TaskGroupApi extends BaseAPI {
    /**
     * 
     * @summary Change task group status by performing an action on it.
     * @param {string} storeId the store identifier.
     * @param {string} taskgroupId The taskgroupId identifier.
     * @param {string} actionType The change status action to perform on task group.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupChangeStatusPut(storeId: string, taskgroupId: string, actionType: string, responseFormat?: string, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupChangeStatusPut(storeId, taskgroupId, actionType, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a task group comment.
     * @param {string} storeId the store identifier.
     * @param {string} taskgroupId The taskgroupId identifier.
     * @param {string} comment The taskgroup comment.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId: string, taskgroupId: string, comment: string, responseFormat?: string, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupCreateTaskGroupCommentPost(storeId, taskgroupId, comment, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a task group.
     * @param {string} storeId the store identifier.
     * @param {string} taskgroupId The taskgroupId identifier.
     * @param {string} name The name of the task group.
     * @param {string} [description] The description of the task group.
     * @param {string} [quickPublish] Whether to quick publish task group.
     * @param {string} [persistent] Whether task group is persistent.
     * @param {string} [dueDate] Date and time the task group is due.
     * @param {string} [promotionDate] Date and time to commit task group.
     * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupCreateTaskGroupPost(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupCreateTaskGroupPost(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds task groups by a query. See each query for details on input and output.
     * @param {string} storeId the store identifier.
     * @param {string} q The task group identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupGet(storeId: string, q: string, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupGet(storeId, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds a task group by its ID..
     * @param {string} storeId the store identifier.
     * @param {string} taskGroupId The task group identifier.
     * @param {string} profileName Profile name. Profiles determine the subset of data to be returned by a query.
     * @param {number} pageNumber Page number, starting at 1. Valid values include positive integers of 1 and above. The �pageSize� must be specified for paging to work..
     * @param {number} pageSize age size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The �pageNumber� must be specified for paging to work.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId: string, taskGroupId: string, profileName: string, pageNumber: number, pageSize: number, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupTaskGroupIdTaskGroupIdGet(storeId, taskGroupId, profileName, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a task group.
     * @param {string} storeId the store identifier.
     * @param {string} taskgroupId The taskgroupId identifier.
     * @param {string} name The name of the task group.
     * @param {string} [description] The description of the task group.
     * @param {string} [quickPublish] Whether to quick publish task group.
     * @param {string} [persistent] Whether task group is persistent.
     * @param {string} [dueDate] Date and time the task group is due.
     * @param {string} [promotionDate] Date and time to commit task group.
     * @param {string} [approvers] The list of approvers for the task group. Separate multiple approvers with a comma.
     * @param {string} [responseFormat] The response format. If the request has an input body, that body must also use the format specified in \&quot;responseFormat\&quot;. Valid values include �json� and �xml� without the quotes. If the responseFormat isn�t specified, the �accept� HTTP header shall be used to determine the format of the response. If the �accept� HTTP header isn�t specified as well, the default response format shall be in json.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public storeStoreIdTaskGroupUpdateTaskGroupPut(storeId: string, taskgroupId: string, name: string, description?: string, quickPublish?: string, persistent?: string, dueDate?: string, promotionDate?: string, approvers?: string, responseFormat?: string, options?: any) {
        return TaskGroupApiFp(this.configuration).storeStoreIdTaskGroupUpdateTaskGroupPut(storeId, taskgroupId, name, description, quickPublish, persistent, dueDate, promotionDate, approvers, responseFormat, options).then((request) => request(this.axios, this.basePath));
    }
}
