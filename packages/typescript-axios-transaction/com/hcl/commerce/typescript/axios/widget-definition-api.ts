/* tslint:disable */
/* eslint-disable */
/**
 * HCL Commerce Transaction server Services 
 * These services provide APIs to interact with transaction
 *
 * The version of the OpenAPI document: 9.1.6
 * 
 * (C) Copyright HCL Technologies Limited 2021
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../../../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { WidgetDefinitionIBMAdminSummary } from '../../../../../com/hcl/commerce/typescript/axios';
// @ts-ignore
import { WidgetDefinitionIBMStoreSummary } from '../../../../../com/hcl/commerce/typescript/axios';
/**
 * WidgetDefinitionApi - axios parameter creator
 * @export
 */
export const WidgetDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Finds widget definitions by widget types. Invalid widget types are ignored.
         * @summary Get by widget type
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<number>} widgetType The widget type.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {boolean} [includeInactiveWidgets] Boolean flag to indicate if inactive widget definitions must be included in the response. By default inactive widgets are filtered.
         * @param {Array<number>} [dataLanguageIds] Data languages restrict the language specific data in the result to the languages specified.
         * @param {number} [pageNumber] Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionByWidgetTypes: async (storeId: string, q: string, widgetType: Array<number>, profileName: string, includeInactiveWidgets?: boolean, dataLanguageIds?: Array<number>, pageNumber?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('widgetDefinitionByWidgetTypes', 'storeId', storeId)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('widgetDefinitionByWidgetTypes', 'q', q)
            // verify required parameter 'widgetType' is not null or undefined
            assertParamExists('widgetDefinitionByWidgetTypes', 'widgetType', widgetType)
            // verify required parameter 'profileName' is not null or undefined
            assertParamExists('widgetDefinitionByWidgetTypes', 'profileName', profileName)
            const localVarPath = `/store/{storeId}/widget_definition`
                .replace(`{${"storeId"}}`, String(storeId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (widgetType) {
                localVarQueryParameter['widgetType'] = widgetType.join(COLLECTION_FORMATS.csv);
            }

            if (includeInactiveWidgets !== undefined) {
                localVarQueryParameter['includeInactiveWidgets'] = includeInactiveWidgets;
            }

            if (profileName !== undefined) {
                localVarQueryParameter['profileName'] = profileName;
            }

            if (dataLanguageIds) {
                localVarQueryParameter['dataLanguageIds'] = dataLanguageIds.join(COLLECTION_FORMATS.csv);
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a widget definition by its identifier.
         * @summary Get by identifier
         * @param {string} storeId The store identifier.
         * @param {string} identifier The widget definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionFindByIdentifier: async (storeId: string, identifier: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('widgetDefinitionFindByIdentifier', 'storeId', storeId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('widgetDefinitionFindByIdentifier', 'identifier', identifier)
            const localVarPath = `/store/{storeId}/widget_definition/identifier/{identifier}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"identifier"}}`, String(identifier));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a widget definition by its ID.
         * @summary Get by ID
         * @param {string} storeId The store identifier.
         * @param {string} widgetDefinitionId The widget definition ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionFindByWidgetDefinitionId: async (storeId: string, widgetDefinitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('widgetDefinitionFindByWidgetDefinitionId', 'storeId', storeId)
            // verify required parameter 'widgetDefinitionId' is not null or undefined
            assertParamExists('widgetDefinitionFindByWidgetDefinitionId', 'widgetDefinitionId', widgetDefinitionId)
            const localVarPath = `/store/{storeId}/widget_definition/{widgetDefinitionId}`
                .replace(`{${"storeId"}}`, String(storeId))
                .replace(`{${"widgetDefinitionId"}}`, String(widgetDefinitionId));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WidgetDefinitionApi - functional programming interface
 * @export
 */
export const WidgetDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WidgetDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * Finds widget definitions by widget types. Invalid widget types are ignored.
         * @summary Get by widget type
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<number>} widgetType The widget type.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {boolean} [includeInactiveWidgets] Boolean flag to indicate if inactive widget definitions must be included in the response. By default inactive widgets are filtered.
         * @param {Array<number>} [dataLanguageIds] Data languages restrict the language specific data in the result to the languages specified.
         * @param {number} [pageNumber] Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async widgetDefinitionByWidgetTypes(storeId: string, q: string, widgetType: Array<number>, profileName: string, includeInactiveWidgets?: boolean, dataLanguageIds?: Array<number>, pageNumber?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetDefinitionIBMAdminSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.widgetDefinitionByWidgetTypes(storeId, q, widgetType, profileName, includeInactiveWidgets, dataLanguageIds, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds a widget definition by its identifier.
         * @summary Get by identifier
         * @param {string} storeId The store identifier.
         * @param {string} identifier The widget definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async widgetDefinitionFindByIdentifier(storeId: string, identifier: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetDefinitionIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.widgetDefinitionFindByIdentifier(storeId, identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds a widget definition by its ID.
         * @summary Get by ID
         * @param {string} storeId The store identifier.
         * @param {string} widgetDefinitionId The widget definition ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async widgetDefinitionFindByWidgetDefinitionId(storeId: string, widgetDefinitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetDefinitionIBMStoreSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.widgetDefinitionFindByWidgetDefinitionId(storeId, widgetDefinitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WidgetDefinitionApi - factory interface
 * @export
 */
export const WidgetDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WidgetDefinitionApiFp(configuration)
    return {
        /**
         * Finds widget definitions by widget types. Invalid widget types are ignored.
         * @summary Get by widget type
         * @param {string} storeId The store identifier.
         * @param {string} q The query name.
         * @param {Array<number>} widgetType The widget type.
         * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
         * @param {boolean} [includeInactiveWidgets] Boolean flag to indicate if inactive widget definitions must be included in the response. By default inactive widgets are filtered.
         * @param {Array<number>} [dataLanguageIds] Data languages restrict the language specific data in the result to the languages specified.
         * @param {number} [pageNumber] Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.
         * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionByWidgetTypes(storeId: string, q: string, widgetType: Array<number>, profileName: string, includeInactiveWidgets?: boolean, dataLanguageIds?: Array<number>, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<WidgetDefinitionIBMAdminSummary> {
            return localVarFp.widgetDefinitionByWidgetTypes(storeId, q, widgetType, profileName, includeInactiveWidgets, dataLanguageIds, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds a widget definition by its identifier.
         * @summary Get by identifier
         * @param {string} storeId The store identifier.
         * @param {string} identifier The widget definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionFindByIdentifier(storeId: string, identifier: string, options?: any): AxiosPromise<WidgetDefinitionIBMStoreSummary> {
            return localVarFp.widgetDefinitionFindByIdentifier(storeId, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds a widget definition by its ID.
         * @summary Get by ID
         * @param {string} storeId The store identifier.
         * @param {string} widgetDefinitionId The widget definition ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetDefinitionFindByWidgetDefinitionId(storeId: string, widgetDefinitionId: string, options?: any): AxiosPromise<WidgetDefinitionIBMStoreSummary> {
            return localVarFp.widgetDefinitionFindByWidgetDefinitionId(storeId, widgetDefinitionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WidgetDefinitionApi - object-oriented interface
 * @export
 * @class WidgetDefinitionApi
 * @extends {BaseAPI}
 */
export class WidgetDefinitionApi extends BaseAPI {
    /**
     * Finds widget definitions by widget types. Invalid widget types are ignored.
     * @summary Get by widget type
     * @param {string} storeId The store identifier.
     * @param {string} q The query name.
     * @param {Array<number>} widgetType The widget type.
     * @param {string} profileName Profile name. Profiles determine the subset of data returned by a query.
     * @param {boolean} [includeInactiveWidgets] Boolean flag to indicate if inactive widget definitions must be included in the response. By default inactive widgets are filtered.
     * @param {Array<number>} [dataLanguageIds] Data languages restrict the language specific data in the result to the languages specified.
     * @param {number} [pageNumber] Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.
     * @param {number} [pageSize] Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetDefinitionApi
     */
    public widgetDefinitionByWidgetTypes(storeId: string, q: string, widgetType: Array<number>, profileName: string, includeInactiveWidgets?: boolean, dataLanguageIds?: Array<number>, pageNumber?: number, pageSize?: number, options?: any) {
        return WidgetDefinitionApiFp(this.configuration).widgetDefinitionByWidgetTypes(storeId, q, widgetType, profileName, includeInactiveWidgets, dataLanguageIds, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds a widget definition by its identifier.
     * @summary Get by identifier
     * @param {string} storeId The store identifier.
     * @param {string} identifier The widget definition identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetDefinitionApi
     */
    public widgetDefinitionFindByIdentifier(storeId: string, identifier: string, options?: any) {
        return WidgetDefinitionApiFp(this.configuration).widgetDefinitionFindByIdentifier(storeId, identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds a widget definition by its ID.
     * @summary Get by ID
     * @param {string} storeId The store identifier.
     * @param {string} widgetDefinitionId The widget definition ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetDefinitionApi
     */
    public widgetDefinitionFindByWidgetDefinitionId(storeId: string, widgetDefinitionId: string, options?: any) {
        return WidgetDefinitionApiFp(this.configuration).widgetDefinitionFindByWidgetDefinitionId(storeId, widgetDefinitionId, options).then((request) => request(this.axios, this.basePath));
    }
}
