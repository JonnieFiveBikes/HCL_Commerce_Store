
 {{!
 *==================================================
 * Licensed Materials - Property of HCL Technologies
 *
 * HCL Commerce
 *
 * (C) Copyright HCL Technologies Limited 2020
 *
 *==================================================
 *}}
  /**
  * {{&summary}}
  * `@method`
  * `@name {{&className}}#{{&methodName}}`
  *
  * `@param {any} headers (optional)` will add headers to rest request
  *
  * `@param {string} url (optional)` will override the default domain used by the service. Url can be relative or absolute
  *
  * `@param {any} parameters` have following properties:
  {{#parameters}}{{^isSingleton}}   ** `@property {{^isBodyParameter}}{{=<% %>=}}{<%&type%>}<%={{ }}=%>{{/isBodyParameter}}{{#isBodyParameter}}{any}{{/isBodyParameter}} {{&name}} {{#required}}(required){{/required}}` {{#isPathParameter}}The child property of `Parameters`.{{/isPathParameter}}{{&description}}{{/isSingleton}}
  {{/parameters}}
  */
  {{&methodName}}(parameters: any, headers?: any, url?: string ): AxiosPromise<any> {
    let site = getSite();
    let siteContext: string = "";
    if (site) {
      siteContext = site.{{resourceDomainNameCamelCase}}Context || "";
    }
    let domain = url || siteContext;
    let path = "{{&path}}";
    let requestUrl = domain + path;
    let method: Method = "{{&method}}";
    let form:any = {};
    let body = {};
    let header: Headers;
    let queryParameters = new URLSearchParams();
    let formParams = new URLSearchParams();
    if ( typeof headers === "undefined" || headers === null ) {
        header = new Headers();
    }
    else {
        header = new Headers( headers );
    }
    if(parameters === undefined) {
        parameters = {};
    }
    if (parameters["storeId"] === undefined && site !== null) {
      parameters["storeId"] = site.storeID;
    }
    let headerValues:any = {};
    {{#headers}}
    headerValues["{{&name}}"] = [{{&value}}];
    for (let val of headerValues["{{&name}}"]){
      header.append("{{&name}}", val);
    }
    {{/headers}}
    {{#parameters}}
      {{#required}}
      {{#isPathParameter}}
    if(parameters["{{&name}}"] === undefined){
      throw new Error( "Request '{{&path}}' missing path parameter {{&name}}" );
    }
      {{/isPathParameter}}
      {{/required}}
      {{#isQueryParameter}}
        {{#isSingleton}}
        {{#required}}
    queryParameters.set("{{&name}}", "{{&singleton}}");
        {{/required}}
        {{^required}}
    if (parameters["{{&name}}"] !== undefined) {
      const name = "{{&name}}";
      const parameter = parameters[name];
      delete parameters[name];
      if (parameter instanceof Array) {
        parameter.forEach(value => {
        queryParameters.append(name, value);
        });
      } else {
        queryParameters.set(name, parameter);
      };
    }
        {{/required}}
        {{/isSingleton}}
        {{^isSingleton}}
          {{#isPatternType}}
    Object.keys(parameters).forEach(function(parameterName) {
      if(new RegExp("{{&pattern}}").test(parameterName)){
        queryParameters.set(parameterName, parameters[parameterName]);
      }
    });
          {{/isPatternType}}
          {{^isPatternType}}
           {{#required}}
    if(parameters["{{&name}}"] === undefined){
      throw new Error( "Request '{{&path}}' missing required parameter {{&name}}" );
    }
          {{/required}}
    if (parameters["{{&name}}"] !== undefined) {
      const name = "{{&name}}";
      const parameter = parameters[name];
      delete parameters[name];
      if (parameter instanceof Array) {
        parameter.forEach(value => {
        queryParameters.append(name, value);
        });
      } else {
        queryParameters.set(name, parameter);
      }
    }
          {{/isPatternType}}
        {{/isSingleton}}
      {{/isQueryParameter}}
      {{#isPathParameter}}
    requestUrl = requestUrl.replace("{{=<% %>=}}{<%&name%>}<%={{ }}=%>", parameters["{{&name}}"]);
      {{/isPathParameter}}
      {{#isHeaderParameter}}
        {{#isSingleton}}
    header.append("{{&name}}", "{{&singleton}}");
        {{/isSingleton}}
        {{^isSingleton}}
    if(parameters["{{&name}}"] !== undefined){
      header.append("{{&name}}", parameters["{{&name}}"]);
    }
        {{/isSingleton}}
      {{/isHeaderParameter}}

      {{#isBodyParameter}}
    if(parameters["{{&name}}"] !== undefined){
        body = parameters["{{&name}}"];
    }
      {{/isBodyParameter}}
      {{#isFormParameter}}
          {{#isSingleton}}
    form["{{&name}}"] = "{{&singleton}}";
          {{/isSingleton}}
          {{^isSingleton}}
    if(parameters["{{&name}}"] !== undefined){
      form["{{&name}}"] = parameters["{{&name}}"];
    }
          {{/isSingleton}}
      {{/isFormParameter}}
    {{/parameters}}
    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters)
        .forEach(function(parameterName){
            var parameter = parameters.$queryParameters[parameterName];
            queryParameters.set(parameterName,parameter);
        });
    }
    {{> request}}

  },
